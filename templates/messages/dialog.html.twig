{% extends 'base.html.twig' %}

{% block title %}
    {% if selectedUser %}
        Dialog with {{ selectedUser.username }}
    {% else %}
        Select a User to start a dialog
    {% endif %}
{% endblock %}

{% block head %}

{% endblock %}

{% block body %}
    <link href="https://cdnjs.cloudflare.com/ajax/libs/flowbite/2.3.0/flowbite.min.css" rel="stylesheet" />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/flowbite/2.3.0/flowbite.min.js"></script>

    <div class="flex h-screen bg-gray-200 text-black-600 relative">
        <!-- Sidebar -->
        <div class="overflow-auto w-1/4 bg-white border-r border-gray-200">
            <div class="p-5">
                <!-- Search Form Starts Here -->
                <form class="max-w-md mx-auto">
                    <!-- Search Input -->
                    <div class="relative">
                        <label for="default-search" class="sr-only">Search</label>
                        <div class="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none">
                            <svg class="w-4 h-4 text-gray-500" aria-hidden="true" fill="none" viewBox="0 0 20 20">
                                <!-- Search Icon -->
                                <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m19 19-4-4m0-7A7 7 0 1 1 1 8a7 7 0 0 1 14 0Z"/>
                            </svg>
                        </div>
                        <!-- Search Input Field -->
                        <input type="search" id="default-search" class="block w-full p-4 pl-10 text-sm text-gray-900 border border-gray-300 rounded-lg bg-gray-50 focus:ring-blue-500 focus:border-blue-500" placeholder="Search Users" required />
                        <!-- Search Button -->
                    </div>
                </form>
                <!-- User List Starts Here -->
                <ul id="user-list" class="mt-5 space-y-5">
                    <!-- Iterate through users -->
                    {% for user in users %}
                        <li class="animate__animated animate__fadeIn">
                            <!-- User List Item -->
                            <a class="block py-2 px-6 hover:bg-gray-200 rounded-lg" href="{{ path('app_dialog', {id: user.id}) }}">{{ user.username }}</a>
                        </li>
                    {% endfor %}
                </ul>
            </div>
        </div>


        <!-- Main Content -->
        <div class="flex-1 flex flex-col">

            <!-- Header -->

            <div class="border-b p-5 flex justify-between items-center bg-white">

                {% if selectedUser %}

                    <div class="flex items-center">
                        <div class="w-12 h-12 relative">
                            <img class="w-full h-full rounded-full border-4 border-gray-600 transform transition-transform duration-200 ease-in-out hover:scale-110" src="{{ asset('avatars/' ~ selectedUser.avatarFileName) }}"
                                 alt="{{ selectedUser.username }}">
                        </div>
                        <div class="ml-4">
                            <h1 class="text-lg font-bold">{{ selectedUser.username }}</h1>
                            <span class="message-timestamp text-sm font-normal text-gray-500 dark:text-gray-400 pl-1">
                                {% if selectedUser.status == 'online' %}
                                    {{ selectedUser.status }}
                                {% else %}
                                    User was here at: {{ selectedUserChangeStatusAt }}
                                {% endif %}
                            </span>
                        </div>
                    </div>

                {% endif %}

                <!-- Status Menu -->

                <div class="flex items-end">
                    <div id="dropdownUserStatusIconButton" data-dropdown-toggle="dropdownUserStatusIconMenu" data-dropdown-placement="bottom" class="group cursor-pointer text-black hover:text-gray-800 mb-3 flex items-center space-x-2">
                        <span id="statusDot" class="dot bg-green-500 rounded-full h-2 w-2 inline-block mr-2"></span> <!-- Status dot -->
                        <span id="statusText">Online</span> <!-- Status text -->
                        <i id="iconNormal" class="fa-solid fa-chevron-down transition-transform duration-200 group-hover:rotate-180"></i>
                        <i id="iconAnimated" class="hidden fa-solid fa-chevron-down animate-bounce"></i>
                    </div>

                    <div id="dropdownUserStatusIconMenu" class="z-10 hidden bg-white border border-gray-200 rounded-lg shadow-md w-40">
                        <ul>
                            <li class="flex items-center py-2 px-4 hover:bg-gray-100" data-status="Online">
                                <span class="h-3 w-3 mr-2 bg-green-500 rounded-full"></span> <!-- Status dot -->
                                <span>Online</span> <!-- Status text -->
                            </li>
                            <li class="flex items-center py-2 px-4 hover:bg-gray-100" data-status="Busy">
                                <span class="h-3 w-3 mr-2 bg-orange-400 rounded-full"></span> <!-- Status dot -->
                                <span>Busy</span> <!-- Status text -->
                            </li>
                        </ul>
                    </div>

                    <div id="dropdownUserIconButton" data-dropdown-toggle="dropdownUserIconMenu" data-dropdown-placement="bottom" class="group text-black-500 hover:underline pl-4" type="button">
                        <img class="fa-right-from-bracket w-12 h-12 rounded-full border-4 border-blue-500 transform transition-transform duration-200 ease-in-out group-hover:scale-110"
                             src="{{ asset('avatars/' ~ currentUser.avatarFileName) }}"
                             alt="{{ currentUser.username }}" />
                    </div>

                    <div id="dropdownUserIconMenu" class="z-10 hidden bg-white border border-gray-200 rounded-lg shadow w-40">
                        <ul class="py-2 text-sm text-gray-700 dark:text-gray-200" aria-labelledby="dropdownMenuIconButton">
                            <li class="block">
                                <a href="#" class="flex justify-between items-center px-4 py-2 hover:bg-gray-100 dark:hover:bg-gray-600 dark:hover:text-white">
                                    <span>Settings</span>
                                    <i class="fa-solid fa-gears"></i>
                                </a>
                            </li>
                            <li class="block">
                                {{ form_start(avatarForm) }}
                                <label class="flex justify-between items-center px-4 py-2 hover:bg-gray-100 dark:hover:bg-gray-600 dark:hover:text-white">
                                    Avatar
                                    <i class="fa-regular fa-images"></i>
                                    {{ form_errors(avatarForm.avatarFileName) }}
                                    {{ form_widget(avatarForm.avatarFileName, {'attr': {'style': 'display: none', 'onchange': 'this.form.submit()'}}) }}
                                </label>
                                {{ form_end(avatarForm) }}
                            </li>
                            <li class="block mt-2 border-t border-gray-200 pt-2">
                                <a href="{{ path('app_logout') }}" class="flex justify-between items-center px-4 py-2 hover:bg-gray-100 dark:hover:bg-gray-600 dark:hover:text-white">
                                    <span>Log Out</span>
                                    <i class="fa-solid fa-arrow-right-from-bracket"></i>
                                </a>
                            </li>
                        </ul>
                    </div>
                </div>
            </div>

        {% if selectedUser %}

            <!-- Message List -->

            <div id="message-list" class="flex-1 overflow-auto p-5 space-y-5">
                {% for message in messages %}
                    {% if message.sender == selectedUser.username %}
                        {% include 'messages/other_message.html.twig' with {'message': message} %}
                    {% else %}
                        {% include 'messages/user_message.html.twig' with {'message': message} %}
                    {% endif %}
                {% endfor %}
            </div>

                <!-- Message Form -->

            <form id="message-form" class="border-t p-5" action="" method="post" enctype="multipart/form-data">
                {{ form_start(messageForm) }}
                <div class="flex items-center justify-center">
                    <!-- Emoji button -->
                    <button id="dropdownMenuEmojiButton" data-dropdown-toggle="dropdownMenuEmoji" data-dropdown-placement="top" class="flex items-center px-3 bg-gray-200 rounded-lg focus:outline-none" type="button">
                        <i class="far fa-smile text-gray-600"></i>
                    </button>

                    <div id="dropdownMenuEmoji" class="z-10 hidden bg-white divide-y divide-gray-100 rounded-lg shadow w-64 overflow-auto">
                        <div class="py-2 text-2xl grid grid-cols-5 gap-2 p-2">
                                <!-- Add Emoji icons -->
                                <button class="emoji-btn focus:outline-none transform transition-transform duration-200 ease-in-out active:scale-110" type="button">😀</button>
                                <button class="emoji-btn focus:outline-none transform transition-transform duration-200 ease-in-out active:scale-110" type="button">😃</button>
                                <button class="emoji-btn focus:outline-none transform transition-transform duration-200 ease-in-out active:scale-110" type="button">😄</button>
                                <button class="emoji-btn focus:outline-none transform transition-transform duration-200 ease-in-out active:scale-110" type="button">😁</button>
                                <button class="emoji-btn focus:outline-none transform transition-transform duration-200 ease-in-out active:scale-110" type="button">😆</button>
                                <button class="emoji-btn focus:outline-none transform transition-transform duration-200 ease-in-out active:scale-110" type="button">😅</button>
                                <button class="emoji-btn focus:outline-none transform transition-transform duration-200 ease-in-out active:scale-110" type="button">😂</button>
                                <!-- New Emoji icons -->
                                <button class="emoji-btn focus:outline-none transform transition-transform duration-200 ease-in-out active:scale-110" type="button">😎</button>
                                <button class="emoji-btn focus:outline-none transform transition-transform duration-200 ease-in-out active:scale-110" type="button">😍</button>
                                <button class="emoji-btn focus:outline-none transform transition-transform duration-200 ease-in-out active:scale-110" type="button">😒</button>
                            </div>
                    </div>
                    <!-- Image button -->
                    <label for="message_photoData" class="flex items-center px-3 bg-gray-200 rounded-lg focus:outline-none">
                        {{ form_widget(messageForm.photoData, {'attr': {'style': 'display:none', 'id':'message_photoData'}}) }}
                        <i class="far fa-image text-gray-600 fa-dynamic-icon"></i>
                    </label>
                    <!-- Input field (input) -->
                    {{ form_widget(messageForm.content, {'attr': {'class': 'form-textarea flex-grow rounded-lg py-2 px-12 mx-2 resize-vertical'}}) }}
                    <!-- Submit button -->
                    <button type="submit" class="px-5 py-2 bg-blue-500 text-white rounded-lg"><i class="far fa-paper-plane"></i></button>
                </div>
                {{ form_end(messageForm) }}
            </form>
        </div>
        {% endif %}
    </div>
{% endblock %}

{% block javascripts %}

    {% if selectedUser %}
        <script type="text/template" id="user-message-template">
            {% include 'messages/user_message.html.twig' with {'message': {'id': 'id-placeholder', 'sender': 'sender-placeholder', 'content': 'content-placeholder', 'createdAt': 'createdAt-placeholder', 'updatedAt': 'updatedAt-placeholder', 'photoData': 'photoFile-placeholder'}} %}
        </script>

        <script type="text/template" id="other-message-template">
            {% include 'messages/other_message.html.twig' with {'message': {'id': 'id-placeholder', 'sender': 'sender-placeholder', 'content': 'content-placeholder', 'createdAt': 'createdAt-placeholder', 'updatedAt': 'updatedAt-placeholder', 'photoData': 'photoFile-placeholder'}} %}
        </script>


        <script>
            const eventSource = new EventSource("{{ mercure('/dialog/user/' ~ currentUser.id)|escape('js') }}");

            const createUserMessageBubble = (message) => {
                const messageItem = document.createElement('div');
                messageItem.classList.add('message-item', 'py-2', 'px-6', 'rounded-lg', 'max-w-lg', 'flex', 'flex-col', 'space-y-3', 'mr-auto', 'bg-gray-200', 'text-white', 'animate__animated', 'animate__fadeInRight');
                messageItem.setAttribute('data-message-id', message.id);

                const flexContainer = document.createElement('div');
                flexContainer.classList.add('flex', 'items-start', 'gap-2.5');

                const image = document.createElement('img');
                image.classList.add('w-8', 'h-8', 'rounded-full');
                image.setAttribute('src', 'https://static.vecteezy.com/system/resources/previews/002/592/204/original/little-student-afro-boy-avatar-character-free-vector.jpg');
                image.setAttribute('alt', 'User image');

                const messageContentContainer = document.createElement('div');
                messageContentContainer.classList.add('flex', 'flex-col', 'w-full', 'max-w-[420px]', 'leading-1.5', 'p-4', 'border-gray-200', 'bg-gray-100', 'rounded-e-xl', 'rounded-es-xl', 'dark:bg-gray-700');

                const senderInfo = document.createElement('div');
                senderInfo.classList.add('flex', 'items-center', 'space-x-2', 'rtl:space-x-reverse');

                const senderName = document.createElement('span');
                senderName.classList.add('text-sm', 'font-semibold', 'text-gray-900', 'dark:text-white');
                senderName.textContent = message.sender;

                const createdAt = document.createElement('span');
                createdAt.classList.add('text-sm', 'font-normal', 'text-gray-500', 'dark:text-gray-400');
                createdAt.textContent = message.createdAt;

                if (message.photoData) {
                    const messagePhoto = document.createElement('img');
                    messagePhoto.src = "/uploads/" + message.photoData;
                    messagePhoto.alt = "Message Photo";
                    messagePhoto.className = "max-w-xs mt-2";
                }

                const messageContent = document.createElement('p');
                messageContent.classList.add('message-content', 'text-lg', 'max-w-[420px]', 'font-light', 'py-2.5', 'text-gray-900', 'dark:text-white');
                messageContent.textContent = message.content;

                const editForm = document.createElement('div');
                editForm.classList.add('message-edit-form', 'hidden');

                const editedAt = document.createElement('span');
                editedAt.classList.add('text-sm', 'font-normal', 'text-gray-500', 'dark:text-gray-400');
                if (message.updatedAt) {
                    editedAt.textContent = 'Edited at ' + message.updatedAt;
                } else {
                    editedAt.textContent = 'Delivered';
                }

                const dropdownButton = document.createElement('button');
                dropdownButton.id = 'dropdownMenuIconButton_' + message.id;
                dropdownButton.dataset.dropdownToggle = 'dropdownDots_' + message.id;
                dropdownButton.dataset.dropdownPlacement = 'top';
                dropdownButton.classList.add('inline-flex', 'self-center', 'items-center', 'p-2', 'text-sm', 'font-medium', 'text-center', 'text-gray-900', 'bg-gray-200', 'rounded-lg', 'hover:bg-gray-100', 'focus:ring-4', 'focus:outline-none', 'dark:text-white', 'focus:ring-gray-50');
                dropdownButton.type = 'button';

                const dropdownIcon = document.createElement('svg');
                dropdownIcon.classList.add('w-4', 'h-4', 'text-gray-500', 'dark:text-gray-400');
                dropdownIcon.setAttribute('aria-hidden', 'true');
                dropdownIcon.setAttribute('xmlns', 'http://www.w3.org/2000/svg');
                dropdownIcon.setAttribute('fill', 'currentColor');
                dropdownIcon.setAttribute('viewBox', '0 0 4 15');
                dropdownIcon.innerHTML = '<path d="M3.5 1.5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0Zm0 6.041a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0Zm0 5.959a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0Z"/>';

                const dropdownMenu = document.createElement('div');
                dropdownMenu.id = 'dropdownDots_' + message.id;
                dropdownMenu.classList.add('z-10', 'hidden', 'bg-white', 'divide-y', 'divide-gray-100', 'rounded-lg', 'shadow', 'w-40');

                const dropdownList = document.createElement('ul');
                dropdownList.classList.add('py-2', 'text-sm', 'text-gray-700', 'dark:text-gray-200');
                dropdownList.setAttribute('aria-labelledby', 'dropdownMenuIconButton');

                const dropdownItems = [
                    { label: 'Reply', href: '#' },
                    { label: 'Forward', href: '#' },
                    { label: 'Copy', href: '#' },
                    { label: 'Edit', href: '#', class: 'message-edit-btn', 'data-message-id': message.id },
                    { label: 'Delete', href: 'message/delete/' + message.id }
                ];

                dropdownItems.forEach(item => {
                    const listItem = document.createElement('li');
                    const anchor = document.createElement('a');
                    anchor.classList.add('block', 'px-4', 'py-2', 'hover:bg-gray-100', 'dark:hover:bg-gray-600', 'dark:hover:text-white');
                    anchor.textContent = item.label;
                    anchor.href = item.href;
                    if (item['data-message-id']) {
                        anchor.dataset.messageId = item['data-message-id'];
                    }
                    listItem.appendChild(anchor);
                    dropdownList.appendChild(listItem);
                });

                dropdownMenu.appendChild(dropdownList);
                dropdownButton.appendChild(dropdownIcon);
                dropdownButton.appendChild(dropdownMenu);

                senderInfo.appendChild(senderName);
                senderInfo.appendChild(createdAt);
                messageContentContainer.appendChild(senderInfo);
                messageContentContainer.appendChild(messageContent);
                messageContentContainer.appendChild(editForm);
                messageContentContainer.appendChild(editedAt);
                flexContainer.appendChild(image);
                flexContainer.appendChild(messageContentContainer);
                flexContainer.appendChild(dropdownButton);
                messageItem.appendChild(flexContainer);

                return messageItem;
            };

            const createOtherMessageBubble = (message) => {
                const messageItem = document.createElement('div');
                messageItem.classList.add('message-item', 'py-2', 'pr-6', 'pl-24', 'rounded-lg', 'max-w-lg', 'flex', 'flex-col', 'space-y-3', 'ml-auto', 'bg-gray-200', 'text-gray-800', 'animate__animated', 'animate__fadeInLeft');
                messageItem.setAttribute('data-message-id', message.id);

                const flexContainer = document.createElement('div');
                flexContainer.classList.add('flex', 'items-start', 'gap-2.5');

                const image = document.createElement('img');
                image.classList.add('w-8', 'h-8', 'rounded-full');
                image.setAttribute('src', 'https://i.pinimg.com/736x/45/6a/e4/456ae4e5ae1e340ee824209fd8874c8b.jpg');
                image.setAttribute('alt', 'User image');

                const messageContentContainer = document.createElement('div');
                messageContentContainer.classList.add('flex', 'flex-col', 'w-full', 'max-w-[420px]', 'leading-1.5', 'p-4', 'border-gray-200', 'rounded-e-xl', 'rounded-es-xl', 'bg-blue-300');

                const senderInfo = document.createElement('div');
                senderInfo.classList.add('flex', 'items-center', 'space-x-2', 'rtl:space-x-reverse');

                const senderName = document.createElement('span');
                senderName.classList.add('text-sm', 'font-semibold', 'text-gray-900', 'dark:text-white');
                senderName.textContent = message.sender;

                const createdAt = document.createElement('span');
                createdAt.classList.add('text-sm', 'font-normal', 'text-gray-500', 'dark:text-gray-400');
                createdAt.textContent = message.createdAt;

                const messagePhoto = document.createElement('img');
                if (message.photoData) {
                    messagePhoto.src = "/uploads/" + message.photoData;
                    messagePhoto.alt = "Message Photo";
                    messagePhoto.className = "max-w-xs mt-2";
                } else {
                    messagePhoto.src = "";
                }

                const messageContent = document.createElement('p');
                messageContent.classList.add('text-lg', 'font-light', 'py-2.5', 'max-w-[420px]', 'text-gray-900', 'dark:text-white');
                messageContent.textContent = message.content;

                const editedAt = document.createElement('span');
                editedAt.classList.add('text-sm', 'font-normal', 'text-gray-500', 'dark:text-gray-400');
                if (message.updatedAt) {
                    editedAt.textContent = 'Edited at ' + message.updatedAt;
                } else {
                    editedAt.textContent = 'Delivered';
                }

                senderInfo.appendChild(senderName);
                senderInfo.appendChild(createdAt);
                messageContentContainer.appendChild(senderInfo);
                messageContentContainer.appendChild(messagePhoto);
                messageContentContainer.appendChild(messageContent);
                messageContentContainer.appendChild(editedAt);
                flexContainer.appendChild(image);
                flexContainer.appendChild(messageContentContainer);
                messageItem.appendChild(flexContainer);

                // Adding dropdown menu logic
                const dropdownButton = document.createElement('button');
                dropdownButton.id = 'dropdownMenuIconButton_' + message.id;
                dropdownButton.classList.add('inline-flex', 'self-center', 'items-center', 'p-2', 'text-sm', 'font-medium',
                    'text-center', 'text-gray-900', 'bg-gray-200', 'rounded-lg', 'hover:bg-gray-100',
                    'focus:ring-4', 'focus:outline-none', 'dark:text-white', 'focus:ring-gray-50');
                dropdownButton.type = 'button';

                // Creating and adding dropdown icon
                const dropdownIcon = document.createElement('svg');
                dropdownIcon.classList.add('h-4', 'text-gray-500', 'dark:text-gray-400');
                dropdownIcon.setAttribute('aria-hidden', 'true');
                dropdownIcon.setAttribute('xmlns', 'http://www.w3.org/2000/svg');
                dropdownIcon.setAttribute('fill', 'currentColor');
                dropdownIcon.setAttributeNS(null, 'viewBox', '0 0 4 15');
                dropdownIcon.innerHTML = '<i class="fa-solid fa-ellipsis-vertical"></i>';

                dropdownButton.appendChild(dropdownIcon);

                // Creating dropdown menu
                const dropdownMenu = document.createElement('div');
                dropdownMenu.id = 'dropdownDots_' + message.id;
                dropdownMenu.classList.add('z-10', 'hidden', 'bg-white', 'divide-y', 'divide-gray-100', 'rounded-lg', 'shadow', 'w-40');
                dropdownMenu.dataset.popperPlacement = 'bottom';

                dropdownButton.dataset.dropdownToggle = dropdownMenu.id;

                // Creating and adding dropdown items
                const dropdownList = document.createElement('ul');
                dropdownList.classList.add('py-2', 'text-sm', 'text-gray-700', 'dark:text-gray-200');
                dropdownList.setAttribute('aria-labelledby', dropdownButton.id);

                const dropdownItems = [
                    { label: 'Reply', href: '#' },
                    { label: 'Forward', href: '#' },
                    { label: 'Copy', href: '#' },
                ];

                dropdownItems.forEach(item => {
                    const listItem = document.createElement('li');
                    const anchorLink = document.createElement('a');

                    anchorLink.classList.add('block', 'px-4', 'py-2', 'hover:bg-gray-100', 'dark:hover:bg-gray-600', 'dark:hover:text-white');
                    anchorLink.textContent = item.label;
                    anchorLink.href = item.href;

                    listItem.appendChild(anchorLink);
                    dropdownList.appendChild(listItem);
                });

                dropdownMenu.appendChild(dropdownList);

                // Adding dropdown button and dropdown menu to the flex container
                flexContainer.appendChild(dropdownButton);
                flexContainer.appendChild(dropdownMenu);

                // Adding flex container to the main message item
                messageItem.appendChild(flexContainer);

                return messageItem;
            };

            eventSource.onmessage = function(event) {
                const data = JSON.parse(event.data);
                const messageList = document.getElementById('message-list');

                if ('delete' in data) {
                    const messageToDelete = document.querySelector(`[data-message-id="${data.delete}"]`);
                    if (messageToDelete) {
                        messageToDelete.parentNode.removeChild(messageToDelete);
                    }
                    return; // Stop further execution since this is a delete command.
                }

                if ('edit' in data) {
                    const messageToEdit = document.querySelector(`[data-message-id="${data.edit}"]`);
                    if (messageToEdit) {
                        const messageContentElement = messageToEdit.querySelector('p.text-sm');
                        messageContentElement.textContent = data.editContent;
                        const messageUpdatedAtElement = messageToEdit.querySelector('span.message-timestamp');
                        messageUpdatedAtElement.textContent = "Edited at " + data.editTimestamp;
                    }
                    return;
                }

                let newMessage;
                if (data.sender === '{{ currentUser.username }}') {
                    newMessage = createUserMessageBubble(data);
                } else {
                    newMessage = createOtherMessageBubble(data);
                }

                messageList.appendChild(newMessage);
            };

            window.onload = function() {
                const messageList = document.getElementById('message-list');
                messageList.scrollTop = messageList.scrollHeight;
            };
        </script>

        <script>
            document.addEventListener('DOMContentLoaded', function() {
                const emojiMenu = document.getElementById('dropdownMenuEmoji');
                const messageContentInput = document.getElementById('message_content');

                // Add event listener to each emoji button
                const emojiButtons = document.querySelectorAll('.emoji-btn');
                emojiButtons.forEach(button => {
                    button.addEventListener('click', () => {
                        // Get the emoji from the clicked button
                        const emoji = button.textContent;

                        // Insert the emoji into the message form content input field
                        if (messageContentInput) {
                            messageContentInput.value += emoji;

                            console.log('Message content:', messageContentInput.value); // Debugging
                        } else {
                            console.error('Message content input field not found.'); // Debugging
                        }

                    });
                });
            });
        </script>

        <script>
            document.addEventListener('click', function(event) {
                // Check if the clicked element is an edit button
                if (event.target.classList.contains('message-edit-btn')) {
                    event.preventDefault(); // prevent the default action of clicking a link
                    const messageId = event.target.dataset.messageId;
                    const messageItem = document.querySelector(`[data-message-id="${messageId}"]`);
                    const messageContent = messageItem.querySelector('.message-content');
                    const editForm = messageItem.querySelector('.message-edit-form');

                    // Toggle visibility between content and the edit form
                    messageContent.classList.toggle('hidden');
                    editForm.classList.toggle('hidden');

                    // Getting the submit and cancel buttons, and the edit input
                    let submitButton = editForm.querySelector('.btn-submit');
                    let cancelButton = editForm.querySelector('.btn-cancel');
                    const editInput = editForm.querySelector('input');

                    // Clone the submit and cancel buttons to remove existing event listeners
                    const newSubmitButton = submitButton.cloneNode(true);
                    submitButton.parentNode.replaceChild(newSubmitButton, submitButton);
                    submitButton = newSubmitButton;

                    const newCancelButton = cancelButton.cloneNode(true);
                    cancelButton.parentNode.replaceChild(newCancelButton, cancelButton);
                    cancelButton = newCancelButton;

                    // Event listener for the 'Submit' button
                    submitButton.addEventListener('click', function(ev) {
                        ev.preventDefault();

                        const editedContent = editInput.value;
                        const messageId = messageItem.dataset.messageId;

                        // Send an AJAX request to the Symfony controller endpoint
                        fetch(`/user/dialog/message/edit/${messageId}`, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'X-Requested-With': 'XMLHttpRequest', // Add this header to indicate an AJAX request
                            },
                            body: JSON.stringify({ content: editedContent }), // Send the edited content in the request body
                        })
                            .then(response => {
                                if (!response.ok) {
                                    throw new Error('Failed to update message');
                                }
                                // Update the message content and hide the form
                                messageContent.textContent = editedContent;
                                messageContent.classList.remove('hidden');
                                editForm.classList.add('hidden');

                                const messageUpdatedAtElement = messageItem.querySelector('.message-timestamp');
                            })
                            .catch(error => {
                                console.error('Error updating message:', error);
                            });

                    });

                    // Event listener for the 'Cancel' button
                    cancelButton.addEventListener('click', function(ev) {
                        ev.preventDefault();

                        // Reset the input value and hide the form
                        editInput.value = messageContent.textContent;

                        messageContent.classList.remove('hidden');
                        editForm.classList.add('hidden');
                    });
                }
            });
        </script>

        <script>
            document.addEventListener('DOMContentLoaded', (event) => {
                const inputElement = document.querySelector('#message_photoData');
                const iconElement = document.querySelector('.fa-dynamic-icon');

                inputElement.addEventListener('change', function () {
                    if (this.files && this.files.length > 0) {
                        // A file has been selected
                        iconElement.classList.remove('far', 'fa-image', 'text-gray-600');
                        iconElement.classList.add('fa-solid', 'fa-xmark');
                    } else {
                        // No file selected
                        iconElement.classList.add('far', 'fa-image', 'text-gray-600');
                        iconElement.classList.remove('fa-solid', 'fa-xmark');
                    }
                });

                iconElement.addEventListener('click', function () {
                    // Check if the icon is in 'cancel' mode
                    if (iconElement.classList.contains('fa-xmark')) {
                        // Clear the file input
                        inputElement.value = '';
                        // Change the icon back to the image icon
                        iconElement.classList.add('far', 'fa-image', 'text-gray-600');
                        iconElement.classList.remove('fa-solid', 'fa-xmark');
                    }
                });
            });
        </script>

        <script>
            document.addEventListener('DOMContentLoaded', function() {
                document.getElementById('dropdownUserStatusIconButton').addEventListener('click', function() {
                    let iconElementNormal = document.getElementById('iconNormal');
                    let iconElementAnimated = document.getElementById('iconAnimated');
                    iconElementNormal.classList.toggle('hidden');
                    iconElementAnimated.classList.toggle('hidden');
                });
            });

            document.addEventListener('DOMContentLoaded', function() {
                document.getElementById('dropdownUserStatusIconMenu').addEventListener('click', function(event) {
                    let target = event.target;
                    if (target.tagName === 'LI') {
                        let status = target.getAttribute('data-status');
                        let statusDot = document.getElementById('statusDot');
                        let statusText = document.getElementById('statusText');
                        let dropdownMenu = document.getElementById('dropdownUserStatusIconMenu');
                        let iconElementNormal = document.getElementById('iconNormal');
                        let iconElementAnimated = document.getElementById('iconAnimated');

                        // Update status dot color
                        if (status === 'Online') {
                            statusDot.classList.remove('bg-orange-400', 'bg-red-400');
                            statusDot.classList.add('bg-green-500');
                        } else if (status === 'Busy') {
                            statusDot.classList.remove('bg-green-500', 'bg-red-400');
                            statusDot.classList.add('bg-orange-400');
                        } else if (status === 'Offline') {
                            statusDot.classList.remove('bg-green-500', 'bg-orange-400');
                            statusDot.classList.add('bg-red-400');
                        }

                        // Update status text
                        statusText.textContent = status;

                        // Close the dropdown menu
                        dropdownMenu.classList.add('hidden');

                        // Show iconElementNormal and hide iconElementAnimated
                        iconElementNormal.classList.remove('hidden');
                        iconElementAnimated.classList.add('hidden');
                    }
                });
            });
        </script>
    {% endif %}
{% endblock %}
